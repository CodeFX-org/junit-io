buildscript {
    repositories {
        mavenLocal()
        maven {
            name "GradlePlugins"
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name "MavenSnapshot"
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    dependencies {
        classpath group: 'com.diffplug.gradle.spotless', name: 'spotless', version: '2.4.1'
        classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.0'
        classpath group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.9.0'
        classpath group: 'org.ajoberstar', name: 'grgit', version: '2.0.1'
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
}

group 'org.junit-pioneer'
version '0.1-SNAPSHOT'

apply plugin: 'java-library'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'checkstyle'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

ext {
    // assign empty user name and password, so Gradle does not fail due to
    // missing properties when eagerly configuring the Maven credentials
    mavenUserName = project.findProperty('mavenUserName') ?: ''
    mavenPassword = project.findProperty('mavenPassword') ?: ''
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
    travisApiToken = project.findProperty('travisApiToken') ?: ''
}

repositories {
    mavenCentral()
    maven {
        name "MavenSnapshot"
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    api group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0'
    api group: 'org.opentest4j', name: 'opentest4j', version: '1.0.0'

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0'
}

spotless {
    def headerFile = rootProject.file('.infra/spotless/eclipse-public-license-1.0.java')

    java {
        licenseHeaderFile headerFile, '(package|import) '
        importOrderFile rootProject.file('.infra/eclipse/junit-eclipse.importorder')
        eclipseFormatFile rootProject.file('.infra/eclipse/junit-eclipse-formatter-settings.xml')

        trimTrailingWhitespace()
        endWithNewline()

        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
    }

    format 'groovy', {
        target '**/*.groovy'
        indentWithTabs()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile headerFile, "package "

        customReplaceRegex 'class-level Javadoc indentation fix', /^\*/, ' *'
        customReplaceRegex 'nested Javadoc indentation fix', /\t\*/, '\t *'
    }
}

checkstyle {
    toolVersion = '8.2'
    configFile = rootProject.file('.infra/checkstyle/checkstyle.xml')
    sourceSets = [ sourceSets.main ]
}

javadoc {
    // of all the javadoc checks (accessibility, html, missing, reference, syntax; see
    // https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#BEJEFABE)
    // disable the warning for missing comments and tags because they spam the output
    // (it does often not make sense to comment every tag; e.g. the @return tag on annotations)
    options.addStringOption('Xdoclint:accessibility,html,syntax,reference', '-quiet')
}

// to find Javadoc errors early, let 'javadoc' task run during 'check'
check.dependsOn javadoc
// it should ran last, though
javadoc.shouldRunAfter test

// the manifest needs to declare the future module name
jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'org.junit.pioneer'
        )
    }
}

// create sources and JavaDoc JARs
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}

// sign POM and archives
task signPom(type: Sign, dependsOn: 'generatePomFileForCompletePublication') {
    sign file('build/publications/complete/pom-default.xml')
}
signing {
    sign configurations.archives
}
signArchives.dependsOn signPom

// The task "assemble" and by extension "build" depends on signing, which leads to
// problems on machines that have no signatories configured (e.g. AppVeyor). For
// that reason we want to skip signing unless it is actually required for publication.
// Unfortunately there seems to be no way to remove a dependency (in this case from
// "assemble" to "signArchives"), so we disable the task and enable it when required.
signArchives.enabled = false
signPom.enabled = false

// make sure specific tasks are used instead of the overly encompassing `gradle publish`
task publishSnapshot {
    dependsOn 'publishCompletePublicationToMavenSnapshotRepository'
}
task publishRelease {
    dependsOn 'publishCompletePublicationToMavenRepository'
}
tasks.whenTaskAdded{ task ->
    // all publication tasks should require a successful build
    if (task instanceof PublishToMavenRepository)
        task.dependsOn(check)
    // because maven-publish creates its tasks very late,
    // this was the only way I found to add the dependency to signing
    if (task.name == "publishCompletePublicationToMavenRepository") {
        task.dependsOn(signArchives)
        // activate the signing tasks (we deactivated them above)
        signArchives.enabled = true
        signPom.enabled = true
    }
}
gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()
    if (tasks.find { it.name == 'publish' })
        throw new GradleException('''
                ---------------------------------------------------------------------------
                DON'T USE `gradle publish`!

                It will try to publish a snapshot _and_ a release, which doesn't work well.
                Instead use either `gradle publishSnapshot` or `gradle publishRelease`.
                ---------------------------------------------------------------------------
               ''')
    if (tasks.find { it.name == 'publishSnapshot' } && isReleaseVersion)
        throw new GradleException('''
                ------------------------------------------------------------
                DON'T USE `gradle publishSnapshot` ON NON-SNAPSHOT VERSIONS!

                Maybe you're looking for `gradle publishRelease`?
                ------------------------------------------------------------
               ''')
    if (tasks.find { it.name == 'publishRelease' } && !isReleaseVersion)
        throw new GradleException('''
                -------------------------------------------------------
                DON'T USE `gradle publishRelease` ON SNAPSHOT VERSIONS!

                Maybe you're looking for `gradle publishSnapshot`?
                -------------------------------------------------------
               ''')
}

publishing {
    publications {
        complete(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            // only include signatures for releases
            if (isReleaseVersion) {
                artifact source: "build/libs/${rootProject.name}-${rootProject.version}.jar.asc",
                        extension: 'jar.asc'
                artifact source: project.tasks.signPom.signatureFiles.collect { it }[0],
                        extension: 'pom.asc'
                artifact source: "build/libs/${rootProject.name}-${rootProject.version}-sources.jar.asc",
                        classifier: 'sources', extension: 'jar.asc'
                artifact source: "build/libs/${rootProject.name}-${rootProject.version}-javadoc.jar.asc",
                        classifier: 'javadoc', extension: 'jar.asc'
            }

            tasks.withType(Jar) {
                from(project.projectDir) {
                    include 'LICENSE.md'
                    into 'META-INF'
                }
            }

            pom.withXml {
                asNode().with {
                    appendNode('name', 'JUnit Pioneer')
                    appendNode('description', 'JUnit 5 Extension Pack')
                    appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer')
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer')
                        appendNode('connection', 'scm:git:git://github.com:junit-pioneer/junit-pioneer.git')
                    }
                    appendNode('issueManagement').with {
                        appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer/issues')
                        appendNode('system', 'GitHub')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'Eclipse Public License v1.0')
                            appendNode('url', 'http://www.eclipse.org/legal/epl-v10.html')
                        }
                    }
                    appendNode('organization').with {
                        appendNode('name', 'JUnit Pioneer')
                        appendNode('url', 'https://github.com/junit-pioneer')
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('id', 'nipa')
                            appendNode('name', 'Nicolai Parlog')
                            appendNode('email', 'nipa@codefx.org')
                            appendNode('organization', 'CodeFX')
                            appendNode('organizationUrl', 'http://codefx.org')
                            appendNode('timezone', '1')
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name "Maven"
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username mavenUserName
                password mavenPassword
            }
        }
        maven {
            name "MavenSnapshot"
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username mavenUserName
                password mavenPassword
            }
        }
    }
}

configure(rootProject) {

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew and gradlew.bat scripts'
        gradleVersion = '4.2'
        jarFile = "${project.projectDir}/.infra/gradle/gradle-wrapper.jar"
    }

}

task triggerSiteBuild(type: TriggerTravisTask) {
    travisProject = "junit-pioneer/junit-pioneer.github.io"
    branch = "grandmaster"
    apiToken = travisApiToken
    message = "Triggered by successful JUnit Pioneer build for %COMMIT"
}

import okhttp3.Headers
import okhttp3.MediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.Response

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.service.ResolveService

class TriggerTravisTask extends DefaultTask {

    private static final Headers TRAVIS_API_VERSION = Headers.of "Travis-API-Version": "3"
    private static final MediaType JSON = MediaType.parse "application/json; charset=utf-8"
    private static final int OK = 200
    private static final int ACCEPTED = 202
    private static final Set<Integer> OK_CODES = [ OK, ACCEPTED ]

    private final OkHttpClient client = new OkHttpClient()

    String travisProject
    String branch = "master"
    String apiToken
    String message = "Triggering build of %PROJECT"

    @TaskAction
    def trigger() {
        checkConfiguration()
        def message = createMessage()
        println message
        def response = postToTravis(travisProject, branch, message)
        if (OK_CODES.contains(response.code()))
            logger.lifecycle("Successfully triggered Travis build. $response ")
        else
            throw new GradleException("Triggering Travis build failed. $response ")
    }

    private void checkConfiguration() {
        if (travisProject == null)
            logger.error "For the task '${getName()}', no Travis project name has been defined."
        if (apiToken == null)
            logger.error "For the task '${getName()}', no API token has been defined."
        if (travisProject == null || apiToken == null)
            throw new GradleException("To trigger a Travis build, please define both a project name and an API token.")
    }

    String createMessage() {
        def msg = message.replaceAll("%PROJECT", travisProject)
        if (message.contains("%COMMIT"))
            msg = msg.replaceAll("%COMMIT", determineCommit())
        return msg
    }

    String determineCommit() {
        def repo = Grgit.open().repository
        return new ResolveService(repo).toCommit("HEAD").getAbbreviatedId()
    }

    Response postToTravis(String project, String branch, String message) throws IOException {
        def url = "https://api.travis-ci.org/repo/${project.replaceAll("/", "%2F")}/requests"
        def requestBody = """{ "request": { "message": "$message", "branch": "$branch" } }"""

        def request = new Request.Builder()
                .url(url)
                .headers(TRAVIS_API_VERSION)
                .header("Authorization", "token $apiToken")
                .post(RequestBody.create(JSON, requestBody))
                .build()
        return client.newCall(request).execute()
    }

}
