group 'org.junit-pioneer'
version '0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'checkstyle'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

ext {
    // assign empty user name and password, so Gradle does not fail due to
    // missing properties when eagerly configuring the Maven credentials
    mavenUserName = project.findProperty('mavenUserName') ?: ''
    mavenPassword = project.findProperty('mavenPassword') ?: ''
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0-SNAPSHOT'
    compile group: 'org.opentest4j', name: 'opentest4j', version: '1.0.0-M1'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-SNAPSHOT'
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0-SNAPSHOT'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.1'
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        classpath group: 'com.diffplug.gradle.spotless', name: 'spotless', version: '2.2.0'
        classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.0-SNAPSHOT'
    }
}

spotless {
    def headerFile = rootProject.file('.infra/spotless/eclipse-public-license-1.0.java')

    java {
        licenseHeaderFile headerFile, '(package|import) '
        importOrderFile rootProject.file('.infra/eclipse/junit-eclipse.importorder')
        eclipseFormatFile rootProject.file('.infra/eclipse/junit-eclipse-formatter-settings.xml')

        trimTrailingWhitespace()
        endWithNewline()

        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
    }

    format 'groovy', {
        target '**/*.groovy'
        indentWithTabs()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile headerFile, "package "

        customReplaceRegex 'class-level Javadoc indentation fix', /^\*/, ' *'
        customReplaceRegex 'nested Javadoc indentation fix', /\t\*/, '\t *'
    }
}

checkstyle {
    toolVersion = 6.11
    configFile = rootProject.file('.infra/checkstyle/checkstyle.xml')
    sourceSets = [ sourceSets.main ]
}

javadoc {
    // of all the javadoc checks (accessibility, html, missing, reference, syntax; see
    // https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#BEJEFABE)
    // disable the warning for missing comments and tags because they spam the output
    // (it does often not make sense to comment every tag; e.g. the @return tag on annotations)
    options.addStringOption('Xdoclint:accessibility,html,syntax,reference', '-quiet')
}

// to find Javadoc errors early, let 'javadoc' task run during 'check'
check.dependsOn javadoc
// it should ran last, though
javadoc.shouldRunAfter test

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar

            tasks.withType(Jar) {
                from(project.projectDir) {
                    include 'LICENSE.md'
                    into 'META-INF'
                }
            }

            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'JUnit Pioneer')
                    appendNode('description', 'JUnit 5 Extension Pack')
                    appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer')
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer')
                        appendNode('connection', 'scm:git:git://github.com:junit-pioneer/junit-pioneer.git')
                    }
                    appendNode('issueManagement').with {
                        appendNode('url', 'https://github.com/junit-pioneer/junit-pioneer/issues')
                        appendNode('system', 'GitHub')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'Eclipse Public License v1.0')
                            appendNode('url', 'http://www.eclipse.org/legal/epl-v10.html')
                        }
                    }
                    appendNode('organization').with {
                        appendNode('name', 'JUnit Pioneer')
                        appendNode('url', 'https://github.com/junit-pioneer')
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('id', 'nipa')
                            appendNode('name', 'Nicolai Parlog')
                            appendNode('email', 'nipa@codefx.org')
                            appendNode('organization', 'CodeFX')
                            appendNode('organizationUrl', 'http://codefx.org')
                            appendNode('timezone', '1')
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username mavenUserName
                password mavenPassword
            }
        }
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

configure(rootProject) {

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew and gradlew.bat scripts'
        gradleVersion = '3.2'
        jarFile = "${project.projectDir}/.infra/gradle/gradle-wrapper.jar"
    }

}
